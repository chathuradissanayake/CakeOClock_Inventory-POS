@page "/sell"
@rendermode InteractiveServer

@using IMS.UseCases.Activities
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "Sales")]


<h3>Sell Product</h3>
<br />
<EditForm Model="sellViewModel" OnValidSubmit="Sell" id="sell-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="po">Sell Order</label>
        <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber"></InputText>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <IMS.WebApp.Controls.Common.AutoCompleteComponent Label="Product to Sell" SearchFunction="SearchProduct" OnItemSelected="OnItemSelected" />
                <br />
                @* @selectedItem?.Name *@
                <input type="hidden" value="@sellViewModel.ProductId" />

                @if (sellViewModel.ProductId > 0 && sellViewModel.UnitPrice >= 0)
                {
                    <text>Price: </text>
                    @sellViewModel.UnitPrice.ToString("c");
                }
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" class="form-control" @bind-Value="sellViewModel.QuantityToSell"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Sell</button>


</EditForm>


@code {
    
}
