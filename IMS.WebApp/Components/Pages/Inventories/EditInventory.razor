@* @page "/editinventory/{InvId:int}"
@using IMS.UseCases.Inventories
@using IMS.UseCases.Inventories.Interfaces
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IEditInventoryUseCase EditInventoryUseCase
@inject IViewInventoriesByIdUseCase ViewInventoriesByIdUseCase

<h3>Edit Inventory</h3> <br/>
@InvId

<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" class="form-control" @bind-Value="inventory.InventoryName" />
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="name" class="form-control" @bind-Value="inventory.Quantity" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="name" class="form-control" @bind-Value="inventory.Price" />
    </div>
    <br />
    <button type="submit" class="btn btn-outline-primary">Save</button>
    <button type="button" class="btn btn-outline-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int InvId{ get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoriesByIdUseCase.ExecuteAsync(this.InvId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCase.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
 *@